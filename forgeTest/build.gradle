plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "jacoco"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    mods {
        register("forge") {
            sourceSet('main', project(':forge'))
        }
    }

    runs {
        client {
            runDir = 'run/client'
        }

        server {
            runDir = 'run/server'
        }

        gametest {
            runDir = 'run/gametest'
            server()
            property("forge.gameTestServer", "true")
            property("forge.enabledGameTestNamespaces", "testmod")
        }
    }

    forge {
        mixinConfig "manascore.mixins.json"
        mixinConfig "manascore-common.mixins.json"
    }
}

configurations {
    common
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"
    modRuntimeOnly "maven.modrinth:spark:3FEq2lT7"

    implementation(project(path: ':forge', configuration: 'namedElements')) { transitive = false }
    common(project(path: ':common', configuration: 'namedElements')) { transitive = false }
    common(project(path: ':commonTest', configuration: 'namedElements')) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version,
                "forgeLoaderVersion": rootProject.forge_version.split("\\.")[0],
                "minecraftVersion": rootProject.minecraft_version,
                "nextMinecraftVersion": "1.${(Integer.parseInt(rootProject.minecraft_version.split("\\.")[1]) + 1)}"
    }
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}
