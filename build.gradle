buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
        classpath "gradle.plugin.se.bjurr.gitchangelog:git-changelog-gradle-plugin:1.72.0"
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: "se.bjurr.gitchangelog.git-changelog-gradle-plugin"
apply plugin: "com.matthewprenger.cursegradle"
apply plugin: 'maven-publish'


group = 'com.github.manasmods'
version = "${minecraftVersion}-${modVersion}"
archivesBaseName = modId

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

ext {
    if (!project.hasProperty('manasmodsUsername')) {
        System.out.println("No ManasMods Repo User found.")
        //DO NOT WRITE ANYTHING INTO THIS FIELD! ANYONE CEN SEE THIS FIELD!!
        manasmodsUsername = ""
    }

    if (!project.hasProperty('manasmodsPassword')) {
        System.out.println("No ManasMods Repo User password found.")
        //DO NOT WRITE ANYTHING INTO THIS FIELD! ANYONE CEN SEE THIS FIELD!!
        manasmodsPassword = ""
    }
}

minecraft {
    mappings channel: 'parchment', version: "${parchmentVersion}-${minecraftVersion}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', "${modId}"

            mods {
                manascore {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', "${modId}"

            mods {
                manascore {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', "${modId}"

            mods {
                manascore {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', "${modId}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                manascore {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "${modId}.refmap.json"

    config "${modId}.mixins.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
    maven {
        name = "manasmods"
        credentials {
            username System.getenv().getOrDefault("MANAS_REPO_USER", manasmodsUsername)
            password System.getenv().getOrDefault("MANAS_REPO_USER_PASSWORD", manasmodsPassword)
        }
        url "https://manasmods.bytesafe.dev/maven/manasmods"
    }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraftVersion}-${forgeVersion}"

    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    runtimeOnly fg.deobf('com.github.manasmods:unordinary-basics:1.18.2-1.0.1.2')
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "manascore",
                "Specification-Vendor"    : "ManasMods",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "ManasMods",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

def replaceResources = tasks.register("replaceResources", Copy) {
    it.outputs.upToDateWhen { false }
    //Copy it into the build dir
    it.from(sourceSets.main.resources) {
        def forgeLoaderVersion = forgeVersion.substring(0, forgeVersion.indexOf('.'))

        include "META-INF/mods.toml"
        expand 'modVersion': "${modVersion}", 'forgeLoaderVersion': "[${forgeLoaderVersion},)", 'minecraftVersionCheck':
                "${minecraftVersionCheck}", 'modId': "${modId}"
    }
    it.into "$buildDir/resources/main/"
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    exclude('META-INF/mods.toml')
    configure { finalizedBy(replaceResources) }
}

classes.configure {
    dependsOn(replaceResources)
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task makeChangelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    fromRepo = file("$projectDir")
    file = file('changelog.html')
    untaggedName = "Current release ${project.version}"
    fromCommit = lastCommit
    toRef = 'HEAD'
    templateContent = file('changelog.mustache').getText('UTF-8')
}

if (System.getenv().getOrDefault("CF_TOKEN", null) != null) {
    afterEvaluate {
        tasks.curseforge.dependsOn makeChangelog
    }

    curseforge {
        apiKey = System.getenv("CF_TOKEN");
        project {
            id = '619025'
            releaseType = 'release'
            changelog = file('changelog.html')
            addGameVersion minecraftVersion
            changelogType = 'html'
        }

        options {
            detectNewerJava = true
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            name = "manasmods"
            credentials {
                username System.getenv().getOrDefault("MANAS_REPO_USER", manasmodsUsername)
                password System.getenv().getOrDefault("MANAS_REPO_USER_PASSWORD", manasmodsPassword)
            }
            url "https://manasmods.bytesafe.dev/maven/manasmods"
        }
    }
}