plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "jacoco"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    mods {
        register("fabric") {
            sourceSet('main', project(':fabric'))
        }
    }

    runs {
        client {
            runDir = 'run/client'
        }

        server {
            runDir = 'run/server'
        }

        gametest {
            runDir = 'run/gametest'
            server()
            property("fabric-api.gametest", "true")
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"
    modRuntimeOnly "maven.modrinth:spark:FeV5OquF"

    implementation(project(path: ':fabric', configuration: 'namedElements')) { transitive false }
    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    common(project(path: ":commonTest", configuration: "namedElements")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraftVersion": rootProject.minecraft_version,
                "fabricLoader": rootProject.fabric_loader_version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
